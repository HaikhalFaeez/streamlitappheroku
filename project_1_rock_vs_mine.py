# -*- coding: utf-8 -*-
"""Project 1 - Rock vs Mine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HdYYyBXPriSLuedqcCaXBQySoMd0hBIF

1.   A sonar was emitted from a submarine to identified an object whether it is a rock (soil/rock) or a mine (steel)
2.   Work Flow
     
     * Collect Sonar Data - Laboratory Data
     * Data Pre-Processing
     * Train-Test Split
     * Machine Learning Model - Logistic Regression Model (Supervise ML) - Suit For Binary Classification Problem (predict whether the object is a rock or a mine)
     * Trained Logistic Regression Model - feed new data to the model to predict the object

Import the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression #import the ML model
from sklearn.metrics import accuracy_score #to check the accuracy of the model

"""Data Collection and Data Pre-Processing"""

sonar_data = pd.read_csv('/content/sonar data.csv', header=None) #mentioned no header so the first row does not become the header

sonar_data.head()

sonar_data.shape

sonar_data.describe()

sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""Splitting Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=1) #stratify = split data base on Y data
                                                                                                     #equal no. of rock and mine in training and test data

print(X.shape, X_train.shape, X_test.shape)

print(X_train) #training input data
print(Y_train) #training output data

"""Model Training --> Logistic Regression"""

model = LogisticRegression()

#training the logistic regression model with training data

model.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy on the training data

X_train_prediction = model.predict(X_train)
X_train_accuracy = accuracy_score(X_train_prediction, Y_train)

print('The accuracy on the training data : ', X_train_accuracy)

#accuracy on the test data

X_test_prediction = model.predict(X_test)
X_test_accuracy = accuracy_score(X_test_prediction, Y_test)

print('The accuracy on the test data : ', X_test_accuracy)

"""Making A Prediction System"""

input_data = (0.1088,0.1278,0.0926,0.1234,0.1276,0.1731,0.1948,0.4262,0.6828,0.5761,0.4733,0.2362,0.1023,0.2904,0.4713,0.4659,0.1415,0.0849,0.3257,0.9007,0.9312,0.4856,0.1346,0.1604,0.2737,0.5609,0.3654,0.6139,0.5470,0.8474,0.5638,0.5443,0.5086,0.6253,0.8497,0.8406,0.8420,0.9136,0.7713,0.4882,0.3724,0.4469,0.4586,0.4491,0.5616,0.4305,0.0945,0.0794,0.0274,0.0154,0.0140,0.0455,0.0213,0.0082,0.0124,0.0167,0.0103,0.0205,0.0178,0.0187)

#changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 'R'):
  print('The object is a Rock')
else:
  print('The object is a Mine')

